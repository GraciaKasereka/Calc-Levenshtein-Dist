function calculateLevenshteinDistance(str1, str2) {
  // Create a 2D array to store the distances
  const distances = Array(str1.length + 1)
    .fill(null)
    .map(() => Array(str2.length + 1).fill(null));

  // Initialize the first row and column of the array
  for (let i = 0; i <= str1.length; i++) {
    distances[i][0] = i;
  }
  for (let j = 0; j <= str2.length; j++) {
    distances[0][j] = j;
  }

  // Calculate the Levenshtein distance
  for (let i = 1; i <= str1.length; i++) {
    for (let j = 1; j <= str2.length; j++) {
      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;
      distances[i][j] = Math.min(
        distances[i - 1][j] + 1, // deletion
        distances[i][j - 1] + 1, // insertion
        distances[i - 1][j - 1] + cost // substitution
      );
    }
  }

  // Return the final Levenshtein distance
  return distances[str1.length][str2.length];
}

// Example usage:
const string1 = "kitten";
const string2 = "sitting";
const distance = calculateLevenshteinDistance(string1, string2);
console.log(`The Levenshtein distance between "${string1}" and "${string2}" is ${distance}`);
